main.jsx is our "rendering" file...in other words it takes in react objects and transforms them into html/css so that we can see them on screen

in this project we choose the root element to be the starting point  where react objects are to be loaded

jsx file can return just one object and this object can contain many html elements within a div to be returned or it can return just one element

jsx file is not allowed to return more than one object....if we the user wish to return more than one theyd have to be wrapped using a div

in order to use element created in a jsx file they must be exported within that very jsx file and imported in different file where its to be used

margin vs padding
margin is space between div and anything around it whereas padding is space between div and inside 

if we want curved divs on edges we use border radius and set to a percentage    

position attribute
controls how an element is positioned within the document and how it should behave with its nearby elements

if we want to align some things we would use the display css attribute and assign it to flex...this allows us to to easily control how elements align, space out and wrap 

ABOVE before July 25, 2025
DATE: July 28, 2025

-im currently going to make the registration page/sign in page and hope to finish this by tonight before work tomorrow

LEARNING: react useState, react hook forms

useState
- must be imported from react
- format: const [stateVariable, setStateFunction] = useState(initial Value)
- setStateFunction is the function to be used to update the stateVariable

input 
- onChange takes in a function that is called everytime the input box is updated (in our situation we call the setStateFunction setUsername which updates our stateVariable username)

e
- e is a special react object that grasps all the information needed 
about a current event (in this case event trigger)
- e.target is the input box
- e.target.value is the value within the input box
- each time the input box is updated, e.target.value is updated to it

useState uses
- most basic case is for keeping track of user input
- but we can also use it for logic as well, in this case we have email validation where we cross check with regex and is called every time the email input box is updated


DATE: July 29, 2025
position css attribute
-our main goal is to understand when its set to absolute vs relative
-to begin in order to use attributes top left bottom right we must have set position to some value (by default it is static and previously mentioned attributes will not work)
- when set to relative the div is able to move and its orignal space is reserved meaning no other element can reserve that space
- when set is relative absolutely children use element as a reference 
- when set to absolute the div is able to move however its original space is not reserved meaning any other element can overlap and occupy the original space 


form position relative
- by setting position to relative we are able to set it as a reference box 

inner display flex
- by setting display to flex we are able to easily align and control the positioning of the children elements

top attribute in children elements
- since we set the parent div's positioning attribute set to absolute
the children elements when using top attribute are referencing the parent
- e.g. top: 10% in the email class would be 10% from the top of parent div
- e.g. top: 25% in the username class would be the 25% from the top of the parent div which means itll be 15% below the email class

why display flex
- whenever we want to organize elements whether in a row or a coloumn we would always use the display attribute and set it to flex which will give us a flex grid (makes it easier to manipulate)

